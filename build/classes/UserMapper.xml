<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 
	该文件通过代码生成器自动生成,只需编写模板,可以生成任何代码
     具体请查看: http://code.google.com/p/rapid-framework/
    author badqiu email:badqiu(a)gmail.com
-->

<mapper namespace="UserMapper">

	<resultMap id="UserResult" type="models.User">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="commonColumns">
	    <![CDATA[
        	user_id as id,
        	user_name as name,
        	user_phone as phone,
        	user_addr as addr,
        	user_duty as duty
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" parameterType="models.User" 
		useGeneratedKeys="true" keyProperty="id" 
	>
    <![CDATA[
        INSERT INTO
        user_info (
        	user_id ,
        	user_name ,
        	user_phone ,
        	user_addr ,
        	user_duty
        ) VALUES (
        	#{id,jdbcType=BIGINT} ,
        	#{name,jdbcType=VARCHAR} ,
        	#{phone,jdbcType=VARCHAR} ,
        	#{addr,jdbcType=VARCHAR} ,
        	#{duty,jdbcType=VARCHAR}
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="update" parameterType="models.User">
    <![CDATA[
        UPDATE user_info SET
	        user_name = #{name,jdbcType=VARCHAR} ,
	        user_phone = #{phone,jdbcType=VARCHAR} ,
	        user_addr = #{addr,jdbcType=VARCHAR} ,
	        user_duty = #{duty,jdbcType=VARCHAR} 
        WHERE 
	        user_id = #{id} 
    ]]>
	</update>

    <delete id="delete" parameterType="java.lang.Long">
    <![CDATA[
        delete from user_info where
        user_id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" parameterType="java.lang.Long" resultMap="UserResult">
		select <include refid="commonColumns" />
	    <![CDATA[
		    from user_info 
	        where 
		        user_id = #{id} 
	    ]]>
	</select>
	
	<sql id="dynamicWhere">
		<where>
	       <if test="id != null">
				and user_id = #{id}
			</if>
	       <if test="name != null">
				and user_name  = #{name}
			</if>
	       <if test="phone != null">
				and user_phone  = #{phone}
			</if>
	       <if test="addr != null">
				and user_addr = #{addr}
			</if>
	       <if test="duty != null">
				and user_duty = #{duty}
			</if>
		</where>
	</sql>
		
    <select id="count" resultType="long">
        select count(*) from user_info 
		<include refid="dynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="pageSelect" resultMap="UserResult">
    	select <include refid="commonColumns" />
	    from user_info 
		<include refid="dynamicWhere"/>
		<if test="sortColumns != null and sortColumns.length() != 0">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>
